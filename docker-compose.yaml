# version: '3.8'

services:
  # MongoDB service
  mongodb:
    image: mongo:6.0
    container_name: ${CONTAINER_MONGODB}
    restart: always
    ports:
      - "${MONGO_PORT}:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    volumes:
      - mongodb_data:/data/db
    networks:
      - pixelseek-network

  # Weaviate vector database
  weaviate:
    image: semitechnologies/weaviate:1.17.0
    container_name: ${CONTAINER_WEAVIATE}
    restart: always
    ports:
      - "${WEAVIATE_PORT}:8080"
    environment:
      QUERY_DEFAULTS_LIMIT: ${WEAVIATE_QUERY_LIMIT}
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: ${WEAVIATE_ANONYMOUS_ACCESS}
      PERSISTENCE_DATA_PATH: ${WEAVIATE_PERSISTENCE_PATH}
      DEFAULT_VECTORIZER_MODULE: ${WEAVIATE_VECTORIZER}
      ENABLE_MODULES: ${WEAVIATE_MODULES}
      CLUSTER_HOSTNAME: ${WEAVIATE_HOSTNAME}
      AUTOSCHEMA_ENABLED: ${WEAVIATE_AUTOSCHEMA}
    volumes:
      - weaviate_data:${WEAVIATE_PERSISTENCE_PATH}
    networks:
      - pixelseek-network
    depends_on:
      - chinese-clip-module

  # Chinese-CLIP vectorizer module
  chinese-clip-module:
    build:
      context: ./chinese-clip
      dockerfile: Dockerfile
    container_name: ${CONTAINER_CLIP}
    environment:
      CLIP_MODEL_NAME: ${CLIP_MODEL_NAME}
      ENABLE_CUDA: ${CLIP_CUDA_ENABLED}
    restart: always
    networks:
      - pixelseek-network
    volumes:
      - chinese_clip_cache:/root/.cache/clip  # Cache for downloaded models

  # Redis for Celery
  redis:
    image: redis:7.0
    container_name: ${CONTAINER_REDIS}
    restart: always
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - pixelseek-network

  # Django backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ${CONTAINER_BACKEND}
    restart: always
    ports:
      - "${BACKEND_PORT}:8000"
    volumes:
      - ./backend:/app
      - media_data:${MEDIA_ROOT}
    depends_on:
      - mongodb
      - weaviate
      - redis
    environment:
      - DEBUG=${DJANGO_DEBUG}
      - SECRET_KEY=${DJANGO_SECRET_KEY}
      - ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - MONGODB_URI=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@${CONTAINER_MONGODB}:27017/${MONGO_DB_NAME}?authSource=admin
      - WEAVIATE_URL=http://${CONTAINER_WEAVIATE}:8080
      - MEDIA_ROOT=${MEDIA_ROOT}
      - REDIS_URL=redis://${CONTAINER_REDIS}:6379/0
      - CORS_ALLOWED_ORIGINS=${CORS_ORIGINS}
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    networks:
      - pixelseek-network

  # Celery worker for background tasks
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ${CONTAINER_CELERY}
    restart: always
    volumes:
      - ./backend:/app
      - media_data:${MEDIA_ROOT}
    depends_on:
      - backend
      - redis
    environment:
      - DEBUG=${DJANGO_DEBUG}
      - SECRET_KEY=${DJANGO_SECRET_KEY}
      - MONGODB_URI=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@${CONTAINER_MONGODB}:27017/${MONGO_DB_NAME}?authSource=admin
      - WEAVIATE_URL=http://${CONTAINER_WEAVIATE}:8080
      - MEDIA_ROOT=${MEDIA_ROOT}
      - REDIS_URL=redis://${CONTAINER_REDIS}:6379/0
    command: celery -A pixelseek worker --loglevel=info
    networks:
      - pixelseek-network

volumes:
  mongodb_data:
  weaviate_data:
  redis_data:
  media_data:
  chinese_clip_cache:

networks:
  pixelseek-network:
    name: ${NETWORK_NAME}
    driver: bridge